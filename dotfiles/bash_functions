echo '--bash_functions--'


# History Function
# Usage:
#   h without args calls the history command
#   h <arg> Otherwise, issue history | grep <args>
function h() {
    if [ -z "$1" ]
    then
        history
    else
        history | grep "$@"
    fi
}


# set an alternative sudo, fixing that odd message
thesudo() {
    # back up the DYLD_* variables
    local BACK=$DYLD_LIBRARY_PATH
    # unset DYLD_*
    unset DYLD_LIBRARY_PATH
    # calling sudo
    /usr/bin/sudo "$@"
    # restore DYLD_* after sudo finished
    export DYLD_LIBRARY_PATH=$BACK
}
# redirect sudo
alias sudo=thesudo



# Remote Mount (sshfs)
# creates mount folder and mounts the remote filesystem    http://bit.ly/VW1HQ0
rmount() {
    local host folder mname
    host="${1%%:*}:"
    [[ ${1%:} == ${host%%:*} ]] && folder='' || folder=${1##*:}
    if [[ $2 ]]; then
        mname=$2
    else
        mname=${folder##*/}
        [[ "$mname" == "" ]] && mname=${host%%:*}
    fi
    if [[ $(grep -i "host ${host%%:*}" ~/.ssh/config) != '' ]]; then
        # mkdir -p ~/mounts/$mname > /dev/null
        # sshfs $host$folder ~/mounts/$mname -oauto_cache,reconnect,defer_permissions,negative_vncache,volname=$mname,noappledouble && echo "mounted ~/mounts/$mname"
        echo sshfs $host$folder ~/mounts/$mname -oauto_cache,reconnect,defer_permissions,negative_vncache,volname=$mname,noappledouble
        # 10.10.4.76:/home/shill ~/mounts/workdesk
    else
        echo "No entry found for ${host%%:*}"
        return 1
    fi
}

# Remote Umount, unmounts
rumount() {
    if [[ $1 == "-a" ]]; then
        ls -1 ~/mounts/|while read dir
        do
            [[ $(mount|grep "mounts/$dir") ]] && umount ~/mounts/$dir
            # Risky?
            #[[ $(ls ~/mounts/$dir) ]] || rm -rf ~/mounts/$dir
        done
    else
        [[ $(mount|grep "mounts/$1") ]] && umount ~/mounts/$1
        # Risky?
        # [[ $(ls ~/mounts/$1) ]] || rm -rf ~/mounts/$1
    fi
}


