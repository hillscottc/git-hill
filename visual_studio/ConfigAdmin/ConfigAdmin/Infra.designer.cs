#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.261
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ConfigAdmin
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="RDxETL")]
	public partial class InfraDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertBox(Box instance);
    partial void UpdateBox(Box instance);
    partial void DeleteBox(Box instance);
    #endregion
		
		public InfraDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["DataSourceConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public InfraDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public InfraDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public InfraDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public InfraDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Box> Boxes
		{
			get
			{
				return this.GetTable<Box>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Box")]
	public partial class Box : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _app;
		
		private string _env;
		
		private string _fishers;
		
		private string _tulsa;
		
		private string _type;
		
		private string _name;
		
		private string _notes;
		
		private string _app_dirs;
		
		private string _conn_to;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnappChanging(string value);
    partial void OnappChanged();
    partial void OnenvChanging(string value);
    partial void OnenvChanged();
    partial void OnfishersChanging(string value);
    partial void OnfishersChanged();
    partial void OntulsaChanging(string value);
    partial void OntulsaChanged();
    partial void OntypeChanging(string value);
    partial void OntypeChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnnotesChanging(string value);
    partial void OnnotesChanged();
    partial void Onapp_dirsChanging(string value);
    partial void Onapp_dirsChanged();
    partial void Onconn_toChanging(string value);
    partial void Onconn_toChanged();
    #endregion
		
		public Box()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.Always, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_app", DbType="VarChar(10)")]
		public string app
		{
			get
			{
				return this._app;
			}
			set
			{
				if ((this._app != value))
				{
					this.OnappChanging(value);
					this.SendPropertyChanging();
					this._app = value;
					this.SendPropertyChanged("app");
					this.OnappChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_env", DbType="VarChar(10)")]
		public string env
		{
			get
			{
				return this._env;
			}
			set
			{
				if ((this._env != value))
				{
					this.OnenvChanging(value);
					this.SendPropertyChanging();
					this._env = value;
					this.SendPropertyChanged("env");
					this.OnenvChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fishers", DbType="VarChar(30)")]
		public string fishers
		{
			get
			{
				return this._fishers;
			}
			set
			{
				if ((this._fishers != value))
				{
					this.OnfishersChanging(value);
					this.SendPropertyChanging();
					this._fishers = value;
					this.SendPropertyChanged("fishers");
					this.OnfishersChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_tulsa", DbType="VarChar(30)")]
		public string tulsa
		{
			get
			{
				return this._tulsa;
			}
			set
			{
				if ((this._tulsa != value))
				{
					this.OntulsaChanging(value);
					this.SendPropertyChanging();
					this._tulsa = value;
					this.SendPropertyChanged("tulsa");
					this.OntulsaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_type", DbType="VarChar(15)")]
		public string type
		{
			get
			{
				return this._type;
			}
			set
			{
				if ((this._type != value))
				{
					this.OntypeChanging(value);
					this.SendPropertyChanging();
					this._type = value;
					this.SendPropertyChanged("type");
					this.OntypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(100)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_notes", DbType="VarChar(250)")]
		public string notes
		{
			get
			{
				return this._notes;
			}
			set
			{
				if ((this._notes != value))
				{
					this.OnnotesChanging(value);
					this.SendPropertyChanging();
					this._notes = value;
					this.SendPropertyChanged("notes");
					this.OnnotesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_app_dirs", DbType="VarChar(250)")]
		public string app_dirs
		{
			get
			{
				return this._app_dirs;
			}
			set
			{
				if ((this._app_dirs != value))
				{
					this.Onapp_dirsChanging(value);
					this.SendPropertyChanging();
					this._app_dirs = value;
					this.SendPropertyChanged("app_dirs");
					this.Onapp_dirsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_conn_to", DbType="VarChar(100)")]
		public string conn_to
		{
			get
			{
				return this._conn_to;
			}
			set
			{
				if ((this._conn_to != value))
				{
					this.Onconn_toChanging(value);
					this.SendPropertyChanging();
					this._conn_to = value;
					this.SendPropertyChanged("conn_to");
					this.Onconn_toChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
